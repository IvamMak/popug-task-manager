/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.schemaregistry.paymentcycle.state;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentCycleClosedPayload extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5473231713594583100L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentCycleClosedPayload\",\"namespace\":\"com.example.schemaregistry.paymentcycle.state\",\"fields\":[{\"name\":\"userPublicId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"balance\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentCycleClosedPayload> ENCODER =
      new BinaryMessageEncoder<PaymentCycleClosedPayload>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentCycleClosedPayload> DECODER =
      new BinaryMessageDecoder<PaymentCycleClosedPayload>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentCycleClosedPayload> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentCycleClosedPayload> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentCycleClosedPayload> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentCycleClosedPayload>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentCycleClosedPayload to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentCycleClosedPayload from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentCycleClosedPayload instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentCycleClosedPayload fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String userPublicId;
  @Deprecated public java.lang.String date;
  @Deprecated public double balance;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentCycleClosedPayload() {}

  /**
   * All-args constructor.
   * @param userPublicId The new value for userPublicId
   * @param date The new value for date
   * @param balance The new value for balance
   */
  public PaymentCycleClosedPayload(java.lang.String userPublicId, java.lang.String date, java.lang.Double balance) {
    this.userPublicId = userPublicId;
    this.date = date;
    this.balance = balance;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userPublicId;
    case 1: return date;
    case 2: return balance;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userPublicId = value$ != null ? value$.toString() : null; break;
    case 1: date = value$ != null ? value$.toString() : null; break;
    case 2: balance = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userPublicId' field.
   * @return The value of the 'userPublicId' field.
   */
  public java.lang.String getUserPublicId() {
    return userPublicId;
  }


  /**
   * Sets the value of the 'userPublicId' field.
   * @param value the value to set.
   */
  public void setUserPublicId(java.lang.String value) {
    this.userPublicId = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'balance' field.
   * @return The value of the 'balance' field.
   */
  public double getBalance() {
    return balance;
  }


  /**
   * Sets the value of the 'balance' field.
   * @param value the value to set.
   */
  public void setBalance(double value) {
    this.balance = value;
  }

  /**
   * Creates a new PaymentCycleClosedPayload RecordBuilder.
   * @return A new PaymentCycleClosedPayload RecordBuilder
   */
  public static com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder newBuilder() {
    return new com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder();
  }

  /**
   * Creates a new PaymentCycleClosedPayload RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentCycleClosedPayload RecordBuilder
   */
  public static com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder newBuilder(com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder other) {
    if (other == null) {
      return new com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder();
    } else {
      return new com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder(other);
    }
  }

  /**
   * Creates a new PaymentCycleClosedPayload RecordBuilder by copying an existing PaymentCycleClosedPayload instance.
   * @param other The existing instance to copy.
   * @return A new PaymentCycleClosedPayload RecordBuilder
   */
  public static com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder newBuilder(com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload other) {
    if (other == null) {
      return new com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder();
    } else {
      return new com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentCycleClosedPayload instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentCycleClosedPayload>
    implements org.apache.avro.data.RecordBuilder<PaymentCycleClosedPayload> {

    private java.lang.String userPublicId;
    private java.lang.String date;
    private double balance;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userPublicId)) {
        this.userPublicId = data().deepCopy(fields()[0].schema(), other.userPublicId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.balance)) {
        this.balance = data().deepCopy(fields()[2].schema(), other.balance);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentCycleClosedPayload instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userPublicId)) {
        this.userPublicId = data().deepCopy(fields()[0].schema(), other.userPublicId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.balance)) {
        this.balance = data().deepCopy(fields()[2].schema(), other.balance);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'userPublicId' field.
      * @return The value.
      */
    public java.lang.String getUserPublicId() {
      return userPublicId;
    }


    /**
      * Sets the value of the 'userPublicId' field.
      * @param value The value of 'userPublicId'.
      * @return This builder.
      */
    public com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder setUserPublicId(java.lang.String value) {
      validate(fields()[0], value);
      this.userPublicId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userPublicId' field has been set.
      * @return True if the 'userPublicId' field has been set, false otherwise.
      */
    public boolean hasUserPublicId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userPublicId' field.
      * @return This builder.
      */
    public com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder clearUserPublicId() {
      userPublicId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.String getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder setDate(java.lang.String value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'balance' field.
      * @return The value.
      */
    public double getBalance() {
      return balance;
    }


    /**
      * Sets the value of the 'balance' field.
      * @param value The value of 'balance'.
      * @return This builder.
      */
    public com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder setBalance(double value) {
      validate(fields()[2], value);
      this.balance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'balance' field has been set.
      * @return True if the 'balance' field has been set, false otherwise.
      */
    public boolean hasBalance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'balance' field.
      * @return This builder.
      */
    public com.example.schemaregistry.paymentcycle.state.PaymentCycleClosedPayload.Builder clearBalance() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentCycleClosedPayload build() {
      try {
        PaymentCycleClosedPayload record = new PaymentCycleClosedPayload();
        record.userPublicId = fieldSetFlags()[0] ? this.userPublicId : (java.lang.String) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.String) defaultValue(fields()[1]);
        record.balance = fieldSetFlags()[2] ? this.balance : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentCycleClosedPayload>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentCycleClosedPayload>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentCycleClosedPayload>
    READER$ = (org.apache.avro.io.DatumReader<PaymentCycleClosedPayload>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.userPublicId);

    out.writeString(this.date);

    out.writeDouble(this.balance);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userPublicId = in.readString();

      this.date = in.readString();

      this.balance = in.readDouble();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userPublicId = in.readString();
          break;

        case 1:
          this.date = in.readString();
          break;

        case 2:
          this.balance = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










